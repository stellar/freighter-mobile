# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# frozen_string_literal: true

# Load environment variables from local .env file
# TODO: move to CI envs later
require 'dotenv'
Dotenv.load('../../.env')

opt_out_usage

default_platform(:android)

def create_json_secret_file
  key_file_contents = Base64.strict_decode64(
    ENV.fetch("GOOGLE_JSON_SECRET_CONTENT") { raise "GOOGLE_JSON_SECRET_CONTENT environment variable is required" }
  )

  key_file = "google-fastlane-secret.json"

  File.open(key_file, "w") {|io| io << key_file_contents }
  File.chmod(0o600, key_file)
end

def create_keystore_file(env)
  key_file_contents = Base64.strict_decode64(
    ENV.fetch("ANDROID_#{env.to_s.upcase}_KEYSTORE_CONTENT") { raise "ANDROID_#{env.to_s.upcase}_KEYSTORE_CONTENT environment variable is required" }
  )

  key_file = File.expand_path(
    "#{Dir.pwd}/../keystores/#{env.to_s.downcase}-release.keystore"
  )

  File.open(key_file, "wb") {|io| io << key_file_contents }
  File.chmod(0o600, key_file)
end

def increment_version_code(gradle_file_path)
  file_path = File.join(Dir.pwd, gradle_file_path)
  contents = File.read(file_path)
  
  # Find and increment the versionCode
  contents.gsub!(/versionCode\s+(\d+)/) do |match|
    current_version = $1.to_i
    new_version = current_version + 1
    UI.success "ðŸ“± Incrementing versionCode: #{current_version} â†’ #{new_version}"
    "versionCode #{new_version}"
  end
  
  File.write(file_path, contents)
end

platform :android do
  desc "Runs all the tests"
  lane :test do
    gradle(task: "test")
  end

  desc "Push a new beta build to the Google Play"
  lane :beta do
    create_json_secret_file

    create_keystore_file("dev")
    
    increment_version_code("../app/build.gradle")

    # Deep clean gradle build artifacts
    UI.message "ðŸ§¹ Performing deep Gradle clean..."
    sh("cd .. && rm -rf .gradle && rm -rf app/.cxx && rm -rf app/build && ./gradlew clean") rescue UI.error("Clean failed, continuing anyway...")

    gradle(
      task: "bundle",
      flavor: "dev",
      build_type: "Release",
      print_command: false,
      project_dir: "."
    )

    upload_to_play_store(
      track: "internal",
      track_promote_to: "internal"
    )
  end
end
